## XPlanManager configuration ##
#categories
#Format: Category1(Part11,Part12);Category2(Part21,Part22). Encode umlaute with unicode code entities!
#Example: categoriesToParts=Hamburg-Mitte(Hamburg-Mitte);Eimsb\u00fcttel\u0020(Eimsb\u00fcttel);Bremen(Bremen);Kirchheim\u0020(Kirchheim);Bad\u0020Liebenwerda\u0020(Bad\u0020Liebenwerda)
categoriesToParts=${categoriesToParts}
rasterConfigurationCrs=${rasterConfigurationCrs}
rasterLayerMinScaleDenominator=${rasterLayerVisisbilityMinScaleDenominator}
rasterLayerMaxScaleDenominator=${rasterLayerVisisbilityMaxScaleDenominator}
#must be gdal or geotiff, default is gdal
rasterConfigurationType=${rasterConfigurationType}

#indicates if plans with status 'Festgestellt' or 'in Aufstellung' should be stored in separated database schemas or not. If missing false is assumed.
activateSeparatedDataManagement=${isSeparatedDataManagementActivated}

#export of the file 'xplan-reexported.gml' can be suppressed (false, default) or enabled (true).
activateExportOfReexported=${isExportOfReexportedActivated}

# URL des XPlanWMS Endpunkts
# Default: keine URL
wmsEndpoint=

#workspace reloader configuration
workspaceReloadUrls=${workspaceReloadUrls}
workspaceReloadUser=${workspaceReloadUser}
workspaceReloadPassword=${workspaceReloadPassword}

#internal id retriever
workspaceName=${workspaceName}
jdbcConnectionId=${jdbcConnectionId}
internalIdLabel=${internalIdLabel}
internalNameLabel=${internalNameLabel}
selectMatchingIdsSql=${selectMatchingIdsSql}
selectAllIdsSql=${selectAllIdsSql}

#links to detailed information about conformity of the semantic validation
linkSemanticConformity_XPLAN_3=${linkSemanticConformity_XPLAN_3}
linkSemanticConformity_XPLAN_40=${linkSemanticConformity_XPLAN_40}
linkSemanticConformity_XPLAN_41=${linkSemanticConformity_XPLAN_41}
linkSemanticConformity_XPLAN_50=${linkSemanticConformity_XPLAN_50}
linkSemanticConformity_XPLAN_51=${linkSemanticConformity_XPLAN_51}
linkSemanticConformity_XPLAN_52=${linkSemanticConformity_XPLAN_52}

#source of the wmsSortDate value. Configured as 'FeatureTypeName,PropertyName', empty (or missing) if not available for a PlanType and/or version.  
wmsSortDate_BP_Plan_XPLAN_3=${wmsSortDate_BP_Plan_XPLAN_3}
wmsSortDate_BP_Plan_XPLAN_40=${wmsSortDate_BP_Plan_XPLAN_40}
wmsSortDate_BP_Plan_XPLAN_41=${wmsSortDate_BP_Plan_XPLAN_41}
wmsSortDate_BP_Plan_XPLAN_50=${wmsSortDate_BP_Plan_XPLAN_50}
wmsSortDate_BP_Plan_XPLAN_51=${wmsSortDate_BP_Plan_XPLAN_51}
wmsSortDate_BP_Plan_XPLAN_52=${wmsSortDate_BP_Plan_XPLAN_52}
wmsSortDate_FP_Plan_XPLAN_3=${wmsSortDate_FP_Plan_XPLAN_3}
wmsSortDate_FP_Plan_XPLAN_40=${wmsSortDate_FP_Plan_XPLAN_40}
wmsSortDate_FP_Plan_XPLAN_41=${wmsSortDate_FP_Plan_XPLAN_41}
wmsSortDate_FP_Plan_XPLAN_50=${wmsSortDate_FP_Plan_XPLAN_50}
wmsSortDate_FP_Plan_XPLAN_51=${wmsSortDate_FP_Plan_XPLAN_51}
wmsSortDate_FP_Plan_XPLAN_52=${wmsSortDate_FP_Plan_XPLAN_52}
wmsSortDate_RP_Plan_XPLAN_3=${wmsSortDate_RP_Plan_XPLAN_3}
wmsSortDate_RP_Plan_XPLAN_40=${wmsSortDate_RP_Plan_XPLAN_40}
wmsSortDate_RP_Plan_XPLAN_41=${wmsSortDate_RP_Plan_XPLAN_41}
wmsSortDate_RP_Plan_XPLAN_50=${wmsSortDate_RP_Plan_XPLAN_50}
wmsSortDate_RP_Plan_XPLAN_51=${wmsSortDate_RP_Plan_XPLAN_51}
wmsSortDate_RP_Plan_XPLAN_52=${wmsSortDate_RP_Plan_XPLAN_52}
wmsSortDate_LP_Plan_XPLAN_3=${wmsSortDate_LP_Plan_XPLAN_3}
wmsSortDate_LP_Plan_XPLAN_40=${wmsSortDate_LP_Plan_XPLAN_40}
wmsSortDate_LP_Plan_XPLAN_41=${wmsSortDate_LP_Plan_XPLAN_41}
wmsSortDate_LP_Plan_XPLAN_50=${wmsSortDate_LP_Plan_XPLAN_50}
wmsSortDate_LP_Plan_XPLAN_51=${wmsSortDate_LP_Plan_XPLAN_51}
wmsSortDate_SO_Plan_XPLAN_50=${wmsSortDate_SO_Plan_XPLAN_50}
wmsSortDate_SO_Plan_XPLAN_51=${wmsSortDate_SO_Plan_XPLAN_51}
wmsSortDate_SO_Plan_XPLAN_52=${wmsSortDate_SO_Plan_XPLAN_52}

#the absolute path to the HALE CLI used to transform XPlanGML to INSPIRE PLU or XPlanGML version 4.1 to 5.1 (https://github.com/halestudio/hale-cli)
pathToHaleCli=${pathToHaleCli}

#PlanwerkWMS and metadata coupling
#The properties planWerkWmsBaseUrl, cswUrlProvidingDatasetMetadata and directoryToStoreMetadata must exist to enable this feature
#Base URL of the XPlanWerkWMS (e.g. http://localhost:8083/xplan-wms/), never null if feature is enabled
planWerkWmsBaseUrl=${planWerkWmsBaseUrl}
#List of Layers and Styles to use in GetMap request (defaults to e.g. BP_Planvektor,BP_Planraster)
planWerkWmsGetMapLayers_BP_Plan=${planWerkWmsGetMapLayers_BP_Plan}
planWerkWmsGetMapStyles_BP_Plan=${planWerkWmsGetMapStyles_BP_Plan}
planWerkWmsGetMapLayers_FP_Plan=${planWerkWmsGetMapLayers_FP_Plan}
planWerkWmsGetMapStyles_FP_Plan=${planWerkWmsGetMapStyles_FP_Plan}
planWerkWmsGetMapLayers_RP_Plan=${planWerkWmsGetMapLayers_RP_Plan}
planWerkWmsGetMapStyles_RP_Plan=${planWerkWmsGetMapStyles_RP_Plan}
planWerkWmsGetMapLayers_LP_Plan=${planWerkWmsGetMapLayers_LP_Plan}
planWerkWmsGetMapStyles_LP_Plan=${planWerkWmsGetMapStyles_LP_Plan}
planWerkWmsGetMapLayers_SO_Plan=${planWerkWmsGetMapLayers_SO_Plan}
planWerkWmsGetMapStyles_SO_Plan=${planWerkWmsGetMapStyles_SO_Plan}
#Width and Height used in GetMap request (default: 750)
planWerkWmsGetMapWidth=${planWerkWmsGetMapWidth}
planWerkWmsGetMapHeight=${planWerkWmsGetMapWidth}
#Cababilites URL of the CSW the dataset metadata should be requested from, never null if feature is enabled
cswUrlProvidingDatasetMetadata=${cswUrlProvidingDatasetMetadata}
#the directory must be existing and writeable, never null if feature is enabled
directoryToStoreMetadata=${directoryToStoreMetadata}

############################
#Alternativer Betriebsmodus#
############################

#Default BBOX for service creation in 'Alternativer Betriebsmodus'.
#This value is used if no BBOX can be retrieved from GML which is imported. Common reasons are a missing CRS definition or invalid geometries.
#The CRS of the BBOX must be in EPSG:4326! If this parameter is not set or empty, a default BBOX covering the whole world is used.
defaultBboxIn4326=${defaultBboxIn4326}
