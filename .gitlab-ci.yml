workflow:
  name: '$PIPELINE_NAME'
  rules:
  - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "owasp"'
    variables:
      PIPELINE_NAME: 'OWASP dependencies check'
  - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "base-image"'
    variables:
      PIPELINE_NAME: 'Maven base build image'
  - when: always

variables:
  MAVEN_OPTS: "-Xmx500m -XX:+UseSerialGC -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN"
  MAVEN_CLI_OPTS: "--batch-mode -DskipDeployBigArtefact=true -s $CI_PROJECT_DIR/ci_settings.xml"
  MAIN_BRANCH: $CI_DEFAULT_BRANCH

stages:
- build
- build:jvm
- build:java4docker
- build:docker
- deploy

maven-build:
  stage: build:jvm
#  image: maven:3.8.6-jdk-11
  image: registry.opencode.de/diplanung/ozgxplanung/mvn-build-image:latest
  script:
  - 'echo "with Maven goal: $MAVEN_GOAL"'
  - 'mvn $MAVEN_CLI_OPTS $MAVEN_GOAL -PskipAll -Dxplan-tests.maven.deploy.skip=true'
  rules:
  - if: $OPERATION != null
    when: never 
  - if: $CI_COMMIT_TAG != null
    when: never 
  - if: $CI_COMMIT_REF_NAME != $MAIN_BRANCH
    variables:
      MAVEN_GOAL: "install"
  - if: $CI_COMMIT_REF_NAME == $MAIN_BRANCH
    variables:
      MAVEN_GOAL: "deploy"

.maven-prepare-docker-contexts:
  stage: build:java4docker
  image: registry.opencode.de/diplanung/ozgxplanung/mvn-build-image:latest
  script:
  - mvn package -Dxplan-tests.maven.deploy.skip=true -Pdocker,skipAll -pl $mvnProjects -am
  - ci/readEnvPropsForKanikoBuilds.sh > build.env
  - find . -name docker-build.tar | xargs gzip
  - set -o pipefail; find . -name docker-build.tar.gz | grep . | xargs du -h
  rules:
  - if: $CI_PIPELINE_SOURCE == 'schedule'
    when: never 
  - if: $CI_COMMIT_TAG != null
    when: on_success
  - if: $CI_COMMIT_REF_NAME != $MAIN_BRANCH
    when: never
  - when: on_success 
  artifacts:
    expire_in: 1 hour
    reports:
      dotenv: build.env
  variables:
    UPSTREAM_REF: $CI_COMMIT_REF_NAME


maven-prepare-docker-contexts-apis-and-inspire-plu:
  extends: .maven-prepare-docker-contexts
  variables:
    mvnProjects: ':xplan-validator-api,:xplan-manager-api,:xplan-dokumente-api,:xplan-webservices-inspireplu'
  artifacts:
    paths:
    - './xplan-validator/xplan-validator-api/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-manager/xplan-manager-api/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-dokumente/xplan-dokumente-api/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-webservices/xplan-webservices-inspireplu/target/docker/**/docker-build.tar.gz'

maven-prepare-docker-contexts-cli:
  extends: .maven-prepare-docker-contexts
  variables:
    mvnProjects: ':xplan-cli-docker'
  artifacts:
    paths:
    - './xplan-cli/**/target/docker/**/tmp/docker-build.tar.gz'

maven-prepare-docker-contexts-web-apps:
  extends: .maven-prepare-docker-contexts
  variables:
    mvnProjects: ':xplan-manager-web,:xplan-validator-web,:xplan-webpages'
  artifacts:
    paths:
    - './xplan-manager/xplan-manager-web/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-validator/xplan-validator-web/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-documentation/xplan-webpages/target/docker/**/tmp/docker-build.tar.gz'

maven-prepare-docker-contexts-others:
  extends: .maven-prepare-docker-contexts
  variables:
    mvnProjects: ':xplan-docker-tomcat,:xplan-docker-tomcat-gdal,:xplan-database-scripts,:xplan-mapproxy-docker,:xplan-mapserver-docker,:xplan-webservices-validator-wms,:xplan-services-docker,:xplan-tests-soapui'
  artifacts:
    paths:
    - './xplan-docker/**/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-database/xplan-database-scripts/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-tests/xplan-tests-soapui/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-webservices/xplan-webservices-mapproxy/xplan-mapproxy-docker/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-webservices/xplan-webservices-mapserver/xplan-mapserver-docker/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-webservices/xplan-webservices-services/xplan-services-docker/target/docker/**/tmp/docker-build.tar.gz'
    - './xplan-webservices/xplan-webservices-validator-wms/target/docker/**/tmp/docker-build.tar.gz'

include: ci/all-kaniko-builds.gitlab-ci.yml


maven-deploy-release:
  image: registry.opencode.de/diplanung/ozgxplanung/mvn-build-image:latest
  stage: build:jvm
  rules:
  - if: $OPERATION != null
    when: never 
  - if: $CI_COMMIT_TAG != null
  script:
  - mvn $MAVEN_CLI_OPTS deploy -PskipAll -Dxplan-tests.maven.deploy.skip=true

gitlab-release:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
  - if: $OPERATION != null
    when: never 
  - if: $CI_COMMIT_TAG != null
  script:
  - echo "Running job gitlab-release for $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: 'Release created using the release-cli.'

# ---------------------------------------------------------------------------------------------------------------------------  
# ---------------------------------------------------------------------------------------------------------------------------
create-maven-build-image:
  stage: deploy
  image:
    name: gcr.io/kaniko-project/executor:v1.9.1-debug
    entrypoint: [""]
  script:
  - /kaniko/executor
    --context "${CI_PROJECT_DIR}"
    --dockerfile "${CI_PROJECT_DIR}/ci/mvn-build-image.Dockerfile"
    --destination "${CI_REGISTRY_IMAGE}/mvn-build-image:latest"
    --cache=true --compressed-caching=false --use-new-run --cleanup
  rules:
  - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "base-image"'

# ---------------------------------------------------------------------------------------------------------------------------  
# ---------------------------------------------------------------------------------------------------------------------------
dependency-check:
  stage: build
#  image: maven:3.8.6-jdk-11
  image: registry.opencode.de/diplanung/ozgxplanung/mvn-build-image:latest
  script:
  - 'mvn org.owasp:dependency-check-maven:aggregate -Ddependency-check.skip=false -Dformats=JUNIT'
  artifacts:
    when: always
    paths:
    - target/dependency-check-junit.xml
    reports:
      junit: target/dependency-check-junit.xml
  rules:
  - if: '$CI_PIPELINE_SOURCE == "schedule" && $OPERATION == "owasp"'
 