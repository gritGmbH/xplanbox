openapi: 3.0.1
info:
  title: XPlanManagerAPI
  description: XPlanManager REST API
  termsOfService: ''
  contact:
    email: 'info@lat-lon.de'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.1.0
servers:
  - url: http://xplanbox.lat-lon.de/xmanager/api/v1
tags:
  - name: manage
    description: Manage XPlanGML documents
    externalDocs:
      description: xPlanBox
      url: ''
  - name: search
    description: Search for XPlanGML documents
    externalDocs:
      description: xPlanBox
      url: ''
paths:
  /plan:
    post:
      tags:
        - manage
      summary: Import the plan
      description: Imports the plan
      operationId: import
      parameters:
        - name: X-Filename
          in: header
          description: Name of the file to be uploaded
          schema:
            type: string
          example: File names such as xplan.gml, xplan.xml, xplan.zip
        - name: skipSemantisch
          in: query
          description: skip semantische Validierung
          schema:
            type: boolean
            default: false
        - name: skipFlaechenschluss
          in: query
          description: skip Flaechenschluss Ueberpruefung
          schema:
            type: boolean
            default: false
        - name: skipGeltungsbereich
          in: query
          description: skip Geltungsbereich Ueberpruefung
          schema:
            type: boolean
            default: false
        - name: internalId
          in: query
          description: internalId links to VerfahrensId
          schema:
            type: string
        - name: planStatus
          in: query
          description: target for data storage, overrides the default derived from xplan:rechtsstand
          schema:
            type: string
            example: FESTGESTELLT
            enum:
              - IN_AUFSTELLUNG
              - FESTGESTELLT
              - ARCHIVIERT
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              description: XPlanArchive (application/zip) file to upload
              format: binary
          application/zip:
            schema:
              type: string
              description: XPlanArchive (application/zip) file to upload
              format: binary
          application/x-zip:
            schema:
              type: string
              description: XPlanArchive (application/zip) file to upload
              format: binary
          application/x-zip-compressed:
            schema:
              type: string
              description: XPlanArchive (application/zip) file to upload
              format: binary
        required: true
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanInfo'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationReport'
        '406':
          description: Invalid content only ZIP with XPlanGML is accepted
  /plan/{planId}:
    get:
      tags:
        - manage
        - search
      summary: Get plan identified by the given plan ID
      description: Returns an existing plan identified by the given plan ID
      operationId: getById
      parameters:
        - name: planId
          in: path
          description: ID of the plan to be returned
          required: true
          schema:
            type: string
          example: 123
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/PlanInfo'
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: Invalid plan ID, plan not found
    delete:
      tags:
        - manage
      summary: Delete plan identified by the given plan ID
      description: Deletes an existing plan identified by the given plan ID
      operationId: delete
      parameters:
        - name: planId
          in: path
          description: ID of the plan to be removed
          required: true
          schema:
            type: string
          example: 123
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/StatusMessage'
        '404':
          description: Invalid plan ID, plan not found
  /plan/{planId}/basisdaten/:
    get:
      operationId: getBasisdaten
      parameters:
        - name: planId
          in: path
          description: planId of the plan basisdaten to be returned
          required: true
          schema:
            type: string
          example: 123  
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basisdaten'
    put:
      operationId: putBasisdaten
      parameters:
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema:
            type: string
      requestBody:
        content:  
          application/json:
            schema: 
              $ref: '#/components/schemas/Basisdaten'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Basisdaten'
  /plan/{planId}/dokument/:
    get:
      operationId: getDokumente
      parameters:
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dateien'
    post:
      operationId: addDokumente
      parameters:
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema:
            type: string
      requestBody:
        content:  
          multipart/form-data:
            schema: 
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
            encoding:
              files:
                contentType: application/pdf, application/msword, application/odt
                headers:
                  X-Filename: 
                    description: Name der Datei
                    schema:
                      type: string
                  X-MimeType: 
                    description: Typ der Datei
                    schema:
                      type: string    
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dateien'
  /plan/{planId}/dokument/{id}:
    get:
      operationId: getDokumentById
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be returned
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/pdf:
              schema: 
                type: string
                format: binary
    put:
      operationId: addDokumentById
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be updated
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be updated
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/pdf:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Dateien'
    delete: 
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be deleted
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Dateien'
  /plan/{planId}/text/:
    get:
      operationId: getTexte
      parameters:
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dateien'
    post:
      operationId: addTexte
      parameters:
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema: 
            type: string
      requestBody:
        content:  
          multipart/form-data:
            schema: 
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
            encoding:
              files:
                contentType: application/pdf, application/msword, application/odt
                headers:
                  X-Filename: 
                    description: Name der Datei
                    schema:
                      type: string
                  X-MimeType: 
                    description: Typ der Datei
                    schema:
                      type: string    
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dateien'
  /plan/{planId}/text/{id}:
    get:
      operationId: getTextById
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be returned
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/pdf:
              schema: 
                type: string
                format: binary
    put:
      operationId: addTextById
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be updated
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be updated
          required: true
          schema:
            type: string
      requestBody:
        content: 
          application/pdf:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Dateien'
    delete: 
      operationId: deleteTextById
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be deleted
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/Dateien'  
  /plan/{planId}/rasterbasis:
    get:
      operationId: getRasterBasis
      parameters:
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dateien'
    post:
      operationId: addRasterBasis
      parameters:
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema:
            type: string
      requestBody:
        content:  
          multipart/form-data:
            schema: 
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
            encoding:
              files:
                contentType: image/tiff, image/png
                headers:
                  X-Filename: 
                    description: Name der Datei
                    schema:
                      type: string
                  X-MimeType: 
                    description: Typ der Datei
                    schema:
                      type: string  
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dateien'
  /plan/{planId}/rasterbasis/{id}:
    get:
      operationId: getRasterbasisById
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be returned
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be returned
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            image/tiff:
              schema: 
                type: string
                format: binary
            image/png:
              schema: 
                type: string
                format: binary    
    put:
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be updated
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:  
          multipart/form-data:
            schema: 
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
            encoding:
              files:
                contentType: image/tiff, image/png
                headers:
                  X-Filename: 
                    description: Name der Datei
                    schema:
                      type: string
                  X-MimeType: 
                    description: Typ der Datei
                    schema:
                      type: string       
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: object
    delete: 
      parameters: 
        - name: planId
          in: path
          description: planId of the plan to be deleted
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: id of the GML element to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema: 
                type: object  
  /info:
    get:
      summary: Show system and application configuration
      description: Returns the system and application configuration
      operationId: showConfig
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagerSystemConfig'
  /plan/name/{planName}:
    get:
      tags:
        - search
      summary: Get plan identified by the given planName
      description: Returns a list of plans which match exactly the given planName
      operationId: getByName
      parameters:
        - name: planName
          in: path
          description: planName of the plan to be returned
          required: true
          schema:
            pattern: ^[A-Za-z0-9_-]*$
            type: string
          example: bplan_123, fplan-123, rplan20200803
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanInfo'
        '404':
          description: Invalid plan name, plan not found
  /plans:
    get:
      tags:
        - search
      summary: Search for plan by name
      description: Returns a list of plans where the plan name contains the query string case insensitve
      operationId: findByName
      parameters:
        - name: planName
          in: query
          description: The name of the plan to search for
          schema:
            type: string
          example: bplan_123, fplan-123, rplan20200803
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanInfo'
  /:
    get:
      summary: OpenAPI document
      description: API documentation
      operationId: openApi
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    ManagerSystemConfig:
      type: object
      properties:
        version:
          type: string
          description: Version der xPlanBox
          example: v3.4.0
        rulesMetadata:
          $ref: '#/components/schemas/RulesMetadata'
        supportedXPlanGmlVersions:
          type: array
          items:
            type: string
            example: XPLAN_51
            enum:
              - XPLAN_3
              - XPLAN_40
              - XPLAN_41
              - XPLAN_50
              - XPLAN_51
              - XPLAN_52
              - XPLAN_53
        rasterCrs:
          type: string
          description: Konfiguriertes CRS für die Rasterdatenhaltung
          example: epsg:28352
        rasterType:
          type: string
          description: 'Typ der Rasterdatenhaltung: gdal oder tiff'
          example: gdal
        skipSemantisch:
          type: boolean
          description: Semantische Validierung bei Import ueberspringen
        skipGeometrisch:
          type: boolean
          description: Geometrische Validierung bei Import ueberspringen
        skipFlaechenschluss:
          type: boolean
          description: Ueberpruefung des Flaechenschluss bei Import ueberspringen
        skipGeltungsbereich:
          type: boolean
          description: Ueberpruefung des Geltungsbereich bei Import ueberspringen
    RulesMetadata:
      type: object
      properties:
        version:
          type: string
          example: 0.9.14
        source:
          type: string
          example: https://bitbucket.org/geowerkstatt-hamburg/xplanung/get/v0.9.14.zip
    StatusMessage:
      type: object
      properties:
        message:
          type: string
          example: Plan mit ID 123 entfernt
    Link:
      required:
        - href
      type: object
      properties:
        href:
          type: string
          format: uri
          example: https://xplanbox.lat-lon.de/xmanager/api/v1/plan/123
        rel:
          type: string
          example: self
          enum:
            - self
            - alternate
            - planwerkwms
        type:
          type: string
          example: application/json
        hreflang:
          type: string
          example: en
        title:
          type: string
          example: Othmarschen 3, Hamburg
        length:
          type: integer
          format: int32
      description: Link to a resource related to the resource such as XPlanWerkWMS or the resource itself
      example:
        href: https://xplanbox.lat-lon.de/xplan-wms/services/planwerkwms/planname/<PLANNAME>?
        rel: planwerkwms
        type: image/png
        hreflang: de
        title: Othmarschen 3
    PlanInfo:
      type: object
      properties:
        id:
          type: integer
          description: internal unique manager identifier, generated at import time
          format: int32
          example: 123
        type:
          type: string
          example: BP_Plan
        version:
          type: string
          example: XPLAN_51
          enum:
            - XPLAN_3
            - XPLAN_40
            - XPLAN_41
            - XPLAN_50
            - XPLAN_51
            - XPLAN_52
            - XPLAN_53
        planStatus:
          type: string
          example: Festgestellt
          enum:
            - FESTGESTELLT
            - IN_AUFSTELLUNG
            - ARCHIVIERT
        raster:
          type: boolean
          example: true
        importDate:
          type: string
          format: date-time
        inspirePublished:
          type: boolean
          example: false
        bbox:
          $ref: '#/components/schemas/PlanInfoBbox'
        xplanModelData:
          $ref: '#/components/schemas/PlanInfoXplanModelData'
        links:
          type: array
          description: Links related to the resource such as XPlanWerkWMS or self link
          example:
            href: https://xplanbox.lat-lon.de/xplan-wms/services/planwerkwms/planname/<PLANNAME>?
            rel: planwerkwms
            type: image/png
            hreflang: de
            title: Othmarschen 3
          items:
            $ref: '#/components/schemas/Link'
    PlanInfoBbox:
      type: object
      properties:
        minX:
          type: number
          format: double
          example: 9.880772
        minY:
          type: number
          format: double
          example: 53.544973
        maxX:
          type: number
          format: double
          example: 9.890302
        maxY:
          type: number
          format: double
          example: 53.546704
        crs:
          type: string
          example: epsg:4326
    PlanInfoXplanModelData:
      type: object
      properties:
        name:
          type: string
          example: Othmarschen3
        nummer:
          type: string
          example: '-'
        internalId:
          type: string
          example: '12341'
        ags:
          type: string
          example: '02000000'
        gemeindeName:
          type: string
          example: Gemeindename
        rechtsstand:
          type: string
          description: translation of code list value of xplan:rechtsstand
          example: Satzung
        inkrafttretensDatum:
          type: string
          format: date-time
      description: attributes derived from XPlanGML data model
    ValidationReport:
      type: object
      properties:
        version:
          type: string
          example: XPLAN_51
          enum:
            - XPLAN_3
            - XPLAN_40
            - XPLAN_41
            - XPLAN_50
            - XPLAN_51
            - XPLAN_52
            - XPLAN_53
        filename:
          type: string
          example: xplan52-test.gml
        name:
          type: string
          example: xplan52-test
        bbox:
          $ref: '#/components/schemas/PlanInfoBbox'
        date:
          type: string
          format: date-time
          example: '2020-08-24T15:06:36.662Z'
        valid:
          type: boolean
          example: false
        externalReferences:
          type: array
          items:
            type: string
            example: stelling.png
        wmsUrl:
          type: string
          format: uri
          example: https://xplanbox.lat-lon.de/xplan-validator-wms/services/wms?PLANWERK_MANAGERID=13
        rulesMetadata:
          $ref: '#/components/schemas/RulesMetadata'
        validationResult:
          $ref: '#/components/schemas/ValidationReportValidationResult'
    ValidationReportValidationResult:
      type: object
      properties:
        semantisch:
          $ref: '#/components/schemas/ValidationReportValidationResultSemantisch'
        geometrisch:
          $ref: '#/components/schemas/ValidationReportValidationResultGeometrisch'
        syntaktisch:
          $ref: '#/components/schemas/ValidationReportValidationResultSyntaktisch'
    ValidationReportValidationResultGeometrisch:
      type: object
      properties:
        valid:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
    ValidationReportValidationResultSemantisch:
      type: object
      properties:
        valid:
          type: boolean
          example: false
        rules:
          type: array
          items:
            $ref: '#/components/schemas/ValidationReportValidationResultSemantischRules'
    ValidationReportValidationResultSemantischRules:
      type: object
      properties:
        name:
          type: string
        isValid:
          type: boolean
        message:
          type: string
        invalidFeatures:
          type: array
          items:
            type: string
            description: GML-ID
            example: GML_b4e47d29-d21c-42ab-85b7-b12ea57e89f2
    ValidationReportValidationResultSyntaktisch:
      type: object
      properties:
        valid:
          type: boolean
          example: false
        messages:
          type: array
          items:
            type: string
    PlanUpdate:
      type: object
      properties:
        basisdaten:
          $ref: '#/components/schemas/PlanInfoXplanModelData'
        gueltigkeitszeitraum:
          $ref: '#/components/schemas/Zeitraum'
        aenderungen:
          $ref: '#/components/schemas/Aenderungen'
        texte:
          $ref: '#/components/schemas/Texte'
        dokumente:
          $ref: '#/components/schemas/Dateien'
        rasterbasis:
          $ref: '#/components/schemas/Rasterbasis'
    Basisdaten:
      type: object
    Dateien:
      type: array
      items:
        $ref: '#/components/schemas/Datei'
    Datei:
      type: object
      properties:
        id:
          type: string
          description: GML Id of the file 
        X-Filename:
          type: string
    Zeitraum:
      type: object
    Aenderungen:
      type: object
    Texte:
      type: object
    Rasterbasis:
      type: object