pipeline {
   agent any
   tools {
      maven 'maven-3.8'
      jdk 'openjdk11'
   }
   parameters {
      string(name: 'CREDENTIALS_ID', defaultValue: "xplanbox.lat-lon.de", description: 'Set id of Jenkins credentials')
      string(name: 'ENDPOINT_MANAGER_API', defaultValue: "https://xplanbox.lat-lon.de/xmanager/api/v1", description: 'Set endpoint of XPlanManagerAPI')
      string(name: 'ENDPOINT_VALIDATOR_API', defaultValue: "https://xplanbox.lat-lon.de/xvalidator/api/v1", description: 'Set endpoint of XPlanValidatorAPI')
      string(name: 'ENDPOINT_MANAGER_WEB', defaultValue: "https://xplanbox.lat-lon.de/xplan-manager-web", description: 'Set endpoint of XPlanManagerWeb')
      string(name: 'BASE_URL_DIENSTE', defaultValue: "https://xplanbox.lat-lon.de", description: 'Set base URL of XPlanDienste')
      string(name: 'BASE_URL_INSPIRE_PLU', defaultValue: "https://xplanbox.lat-lon.de", description: 'Set base URL of INSPIRE PLU')
      string(name: 'BASE_URL_MANAGER_API', defaultValue: "https://xplanbox.lat-lon.de", description: 'Set base URL of XPlanManagerAPI')
      string(name: 'SLACK_CHANNEL', defaultValue: "#testumgebung", description: 'Set slack channel')
      string(name: 'SLACK_MESSAGE_SUCCESS', defaultValue: "Die SoapUI Tests wurden ohne Fehler gegen die Testumgebung https://xplanbox.lat-lon.de/ ausgefuehrt.", description: 'Set slack message for the case that all tests pass')
      string(name: 'SLACK_MESSAGE_FAILURE', defaultValue: "ACHTUNG: Bei der Ausfuehrung der SoapUI Tests gegen die Testumgebung https://xplanbox.lat-lon.de/ traten Fehler auf.", description: 'Set slack message for the case that tests fail')
      string(name: 'SLACK_TEAM_DOMAIN', defaultValue: "xplanbox", description: 'Set slack team domain')
      string(name: 'SLACK_TOKEN_CREDENTIAL_ID', defaultValue: "slack-integration-id", description: 'Set slack token credential id')
   }
   stages {
      stage('Test XPlanManagerAPI') {
         steps {
            withCredentials([
               usernamePassword(credentialsId:"${CREDENTIALS_ID}", passwordVariable: 'Password', usernameVariable: 'Username')
            ]) {
               sh 'mvn test -pl :xplan-tests-soapui -Psystem-tests -DtestFileName=xplan-api-manager-soapui-project.xml -Dendpoint=${ENDPOINT_MANAGER_API} -Dusername=$Username -Dpassword=$Password'
            }
         }
      }
      stage('Test XPlanValidatorAPI') {
         steps {
            withCredentials([
               usernamePassword(credentialsId:"${CREDENTIALS_ID}", passwordVariable: 'Password', usernameVariable: 'Username')
            ]) {
               sh 'mvn test -pl :xplan-tests-soapui -Psystem-tests -DtestFileName=xplan-api-validator-soapui-project.xml -Dendpoint=${ENDPOINT_VALIDATOR_API} -Dusername=$Username -Dpassword=$Password'
            }
         }
      }
      stage('Test XPlanManagerWeb') {
         steps {
            withCredentials([
               usernamePassword(credentialsId:"${CREDENTIALS_ID}", passwordVariable: 'Password', usernameVariable: 'Username')
            ]) {
               sh 'mvn test -pl :xplan-tests-soapui -Psystem-tests -DtestFileName=xplan-manager-web-soapui-project.xml -Dendpoint=${ENDPOINT_MANAGER_WEB} -Dusername=$Username -Dpassword=$Password'
            }
         }
      }
      stage('Test XPlanDienste') {
         steps {
            withCredentials([
               usernamePassword(credentialsId:"${CREDENTIALS_ID}", passwordVariable: 'Password', usernameVariable: 'Username')
            ]) {
               sh 'mvn test -pl :xplan-tests-soapui -Psystem-tests -DtestFileName=xplan-webservices-soapui-project.xml -DbaseUrl=${BASE_URL_DIENSTE} -DbaseUrlInspirePlu=${BASE_URL_INSPIRE_PLU} -DbaseUrlManagerApi=${BASE_URL_MANAGER_API} -Dusername=$Username -Dpassword=$Password'
            }
         }
      }
      stage('Results') {
         steps{
            junit '**/**/target/soapui/TEST-*.xml'
         }
      }
   }
   post {
      success {
         slackSend channel: "${SLACK_CHANNEL}", message: "${SLACK_MESSAGE_SUCCESS}", teamDomain: "${SLACK_TEAM_DOMAIN}", tokenCredentialId: "${SLACK_TOKEN_CREDENTIAL_ID}"
      }
      failure {
         slackSend channel: "${SLACK_CHANNEL}", message: "${SLACK_MESSAGE_FAILURE}", teamDomain: "${SLACK_TEAM_DOMAIN}", tokenCredentialId: "${SLACK_TOKEN_CREDENTIAL_ID}"
      }
      unstable {
         slackSend channel: "${SLACK_CHANNEL}", message: "${SLACK_MESSAGE_FAILURE}", teamDomain: "${SLACK_TEAM_DOMAIN}", tokenCredentialId: "${SLACK_TOKEN_CREDENTIAL_ID}"
      }
   }
}
