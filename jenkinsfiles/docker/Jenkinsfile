pipeline {
  environment {
    ORGANISATION = "latlon"
    REGISTRY_URL = 'https://repo.lat-lon.de:8444/repository/xplanbox-docker/'
    DEPLOY_CREDENTIAL = '26707569-2c7c-4517-9a60-350b6c5041ca'
  }
  agent any
  parameters {
    string(description: 'Version of the Docker Image', name: 'VERSION', defaultValue: '4.4-SNAPSHOT')
    string(description: 'Version of the Docker Image', name: 'BRANCH', defaultValue: 'master')
  }
  stages {
    stage('Preparation') {
      steps{
        deleteDir()
        git credentialsId: 'latlon-CI-bitbucket', url: 'https://bitbucket.org/latlon/xplanbox.git', branch: '$BRANCH'
      }
    }
    stage('Build Images') {
      steps{
        sh 'mvn clean install -Pdocker'
        script {
          focalJdk8Tomcat9Gdal30DockerImage = docker.build(ORGANISATION + '/focal-jdk8-tomcat9-gdal30:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/focal-jdk8-tomcat9-gdal30/Dockerfile xplan-docker/xplan-docker-images/focal-jdk8-tomcat9-gdal30/')
          xplanApiManagerDockerImage = docker.build(ORGANISATION + '/xplan-api-manager-docker:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/xplan-api-manager-docker/Dockerfile xplan-docker/xplan-docker-images/xplan-api-manager-docker/')
          xplanApiValidatorDockerImage = docker.build(ORGANISATION + '/xplan-api-validator-docker:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/xplan-api-validator-docker/Dockerfile xplan-docker/xplan-docker-images/xplan-api-validator-docker/')
          xplanDbDockerImage = docker.build(ORGANISATION + '/xplan-db-docker:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/xplan-db-docker/Dockerfile xplan-docker/xplan-docker-images/xplan-db-docker/')
          xplanDbInspirepluDockerImage = docker.build(ORGANISATION + '/xplan-db-inspireplu-docker:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/xplan-db-inspireplu-docker/Dockerfile xplan-docker/xplan-docker-images/xplan-db-inspireplu-docker/')
          xplanManagerWebDockerImage = docker.build(ORGANISATION + '/xplan-manager-web-docker:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/xplan-manager-web-docker/Dockerfile xplan-docker/xplan-docker-images/xplan-manager-web-docker/')
          xplanServicesDockerImage = docker.build(ORGANISATION + '/xplan-services-docker:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/xplan-services-docker/Dockerfile xplan-docker/xplan-docker-images/xplan-services-docker/')
          xplanServicesInspirepluDockerImage = docker.build(ORGANISATION + '/xplan-services-inspireplu-docker:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/xplan-services-inspireplu-docker/Dockerfile xplan-docker/xplan-docker-images/xplan-services-inspireplu-docker/')
          xplanValidatorWebDockerImage = docker.build(ORGANISATION + '/xplan-validator-web-docker:' + '$VERSION', '--build-arg REPO_USER=develop --build-arg REPO_PASSWD=$PASSWORD -f xplan-docker/xplan-docker-images/xplan-validator-web-docker/Dockerfile xplan-docker/xplan-docker-images/xplan-validator-web-docker/')
        }
      }
    }
    stage('Deploy Images') {
      steps{
        script {
          docker.withRegistry( REGISTRY_URL, DEPLOY_CREDENTIAL ) {
            focalJdk8Tomcat9Gdal30DockerImage.push()
            xplanApiManagerDockerImage.push()
            xplanApiValidatorDockerImage.push()
            xplanDbDockerImage.push()
            xplanDbInspirepluDockerImage.push()
            xplanManagerWebDockerImage.push()
            xplanServicesDockerImage.push()
            xplanServicesInspirepluDockerImage.push()
            xplanValidatorWebDockerImage.push()
          }
        }
      }
    }
  }
}
